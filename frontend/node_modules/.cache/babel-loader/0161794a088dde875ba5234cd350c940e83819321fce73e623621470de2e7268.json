{"ast":null,"code":"var _jsxFileName = \"/Users/minjiwoo/Desktop/comp333/COMP333_HW3/frontend/src/ratingstable.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport UpdateRating from './updaterating';\nimport DeleteRating from './deleterating';\nimport './Ratings.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Ratings() {\n  _s();\n  // State to hold the ratings data\n  const [ratings, setRatings] = useState(\"\");\n  const user = localStorage.getItem(\"user\");\n\n  // State to track which rating should be updated or deleted\n  const [updateRatingId, setUpdateRatingId] = useState(null);\n  const [deleteRatingId, setDeleteRatingId] = useState(null);\n\n  // State to track which form is currently open\n  const [isUpdateFormOpen, setIsUpdateFormOpen] = useState(false);\n  const [isDeleteFormOpen, setIsDeleteFormOpen] = useState(false);\n\n  // Fetch ratings data from the API\n  useEffect(() => {\n    fetch(\"http://localhost/COMP333_HW3/index.php/ratings\").then(response => {\n      return response.json();\n    }).then(data => {\n      setRatings(data);\n    }).catch(error => {\n      console.error(\"Error fetching ratings:\", error);\n    });\n  }, []);\n  if (!ratings) {\n    return null;\n  }\n  const isSongCreatedByUser = rating => {\n    // determine if the song is created by the logged-in user\n    return user === rating.username;\n  };\n  const handleUpdate = rating => {\n    // Set the updateRatingId when the user clicks the \"Update\" button\n    setUpdateRatingId(rating.id);\n    // open the Update form\n    setIsUpdateFormOpen(true);\n    // Close the Delete form\n    setIsDeleteFormOpen(false);\n  };\n  const handleDelete = rating => {\n    // Set the deleteRatingId when the user clicks the \"Delete\" button\n    setDeleteRatingId(rating.id);\n    // open the Delete form\n    setIsDeleteFormOpen(true);\n    // Close the Update form\n    setIsUpdateFormOpen(false);\n  };\n  const closeForms = () => {\n    // Close both Update and Delete forms\n    setIsUpdateFormOpen(false);\n    setIsDeleteFormOpen(false);\n  };\n  console.log(ratings);\n  const renderStars = rating => {\n    const maxRating = 5;\n\n    // Create an array to store star elements\n    const starArray = [];\n\n    // Fill the stars based on the rating value\n    for (let i = 1; i <= maxRating; i++) {\n      if (i <= rating) {\n        // Filled star\n        starArray.push( /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"star-filled\",\n          style: {\n            color: \"yellow\"\n          },\n          children: \"\\u2605\"\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this));\n      } else {\n        // Empty star\n        starArray.push( /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"star-empty\",\n          style: {\n            color: \"gray\"\n          },\n          children: \"\\u2605\"\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this));\n      }\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"star-rating\",\n      children: starArray\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"RatingsTable\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Ratings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Welcome, \", user]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: ratings.map(rating => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ratings-preview\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: rating.song\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), \" by \", rating.artist, /*#__PURE__*/_jsxDEV(\"p\", {\n          children: renderStars(rating.rating)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this), isSongCreatedByUser(rating) && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: () => handleUpdate(rating),\n            className: \"update-icon\",\n            children: \"Update\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: () => handleDelete(rating),\n            className: \"delete-icon\",\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 15\n        }, this)]\n      }, rating.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), updateRatingId && isUpdateFormOpen && /*#__PURE__*/_jsxDEV(UpdateRating, {\n      ratingId: updateRatingId,\n      closeForms: closeForms\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 46\n    }, this), deleteRatingId && isDeleteFormOpen && /*#__PURE__*/_jsxDEV(DeleteRating, {\n      ratingId: deleteRatingId,\n      closeForms: closeForms\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 46\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n_s(Ratings, \"y59ZcCO5iUHfbwAvLmoS1Yg00J0=\");\n_c = Ratings;\nexport default Ratings;\nvar _c;\n$RefreshReg$(_c, \"Ratings\");","map":{"version":3,"names":["React","useState","useEffect","UpdateRating","DeleteRating","jsxDEV","_jsxDEV","Ratings","_s","ratings","setRatings","user","localStorage","getItem","updateRatingId","setUpdateRatingId","deleteRatingId","setDeleteRatingId","isUpdateFormOpen","setIsUpdateFormOpen","isDeleteFormOpen","setIsDeleteFormOpen","fetch","then","response","json","data","catch","error","console","isSongCreatedByUser","rating","username","handleUpdate","id","handleDelete","closeForms","log","renderStars","maxRating","starArray","i","push","className","style","color","children","fileName","_jsxFileName","lineNumber","columnNumber","map","song","artist","onClick","ratingId","_c","$RefreshReg$"],"sources":["/Users/minjiwoo/Desktop/comp333/COMP333_HW3/frontend/src/ratingstable.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport UpdateRating from './updaterating';\nimport DeleteRating from './deleterating';\nimport './Ratings.css';\n\nfunction Ratings() {\n  // State to hold the ratings data\n  const [ratings, setRatings] = useState(\"\");\n  const user = localStorage.getItem(\"user\");\n\n  // State to track which rating should be updated or deleted\n  const [updateRatingId, setUpdateRatingId] = useState(null);\n  const [deleteRatingId, setDeleteRatingId] = useState(null);\n\n  // State to track which form is currently open\n  const [isUpdateFormOpen, setIsUpdateFormOpen] = useState(false);\n  const [isDeleteFormOpen, setIsDeleteFormOpen] = useState(false);\n\n  // Fetch ratings data from the API\n  useEffect(() => {\n    fetch(\"http://localhost/COMP333_HW3/index.php/ratings\")\n      .then((response) => {\n        return response.json()\n      })\n      .then((data) => {\n        setRatings(data)\n      })\n      .catch((error) => {\n        console.error(\"Error fetching ratings:\", error);\n      });\n    }, []);\n\n  if (!ratings) {\n    return null;\n  }\n\n  const isSongCreatedByUser = (rating) => {\n    // determine if the song is created by the logged-in user\n    return user === rating.username;\n  };\n\n  const handleUpdate = (rating) => {\n    // Set the updateRatingId when the user clicks the \"Update\" button\n    setUpdateRatingId(rating.id);\n    // open the Update form\n    setIsUpdateFormOpen(true);\n    // Close the Delete form\n    setIsDeleteFormOpen(false);\n  };\n\n  const handleDelete = (rating) => {\n    // Set the deleteRatingId when the user clicks the \"Delete\" button\n    setDeleteRatingId(rating.id);\n    // open the Delete form\n    setIsDeleteFormOpen(true);\n    // Close the Update form\n    setIsUpdateFormOpen(false);\n  };\n\n  const closeForms = () => {\n    // Close both Update and Delete forms\n    setIsUpdateFormOpen(false);\n    setIsDeleteFormOpen(false);\n  };\n\n  console.log(ratings)\n\n  const renderStars = (rating) => {\n    const maxRating = 5; \n\n    // Create an array to store star elements\n    const starArray = [];\n\n    // Fill the stars based on the rating value\n    for (let i = 1; i <= maxRating; i++) {\n      if (i <= rating) {\n        // Filled star\n        starArray.push(\n          <span key={i} className=\"star-filled\" style={{ color: \"yellow\" }}>\n            &#9733;\n          </span>\n        );\n      } else {\n        // Empty star\n        starArray.push(\n          <span key={i} className=\"star-empty\" style={{ color: \"gray\" }}>\n            &#9733;\n          </span>\n        );\n      }\n    }\n\n    return (\n      <div className=\"star-rating\">{starArray}</div>\n    );\n  };\n\n  return (\n    <div className=\"RatingsTable\">\n      <h1>Ratings</h1>\n      <p>Welcome, {user}</p>\n      <ul>\n        {ratings.map((rating) => (\n          <div className=\"ratings-preview\" key={rating.id}>\n            <strong>{rating.song}</strong> by {rating.artist}\n            <p>{renderStars(rating.rating)}</p>\n            {isSongCreatedByUser(rating) && (\n              <div>\n                <span onClick={() => handleUpdate(rating)} className=\"update-icon\">\n                  Update\n                </span>\n                <span onClick={() => handleDelete(rating)} className=\"delete-icon\">\n                  Delete\n                </span>\n              </div>\n            )}\n          </div>\n        ))}\n      </ul> \n\n      {/* Render the UpdateRating component if updateRatingId is set and the Update form is open */}\n      {updateRatingId && isUpdateFormOpen && <UpdateRating ratingId={updateRatingId} closeForms={closeForms} />}\n\n      {/* Render the DeleteRating component if deleteRatingId is set and the Delete form is open */}\n      {deleteRatingId && isDeleteFormOpen && <DeleteRating ratingId={deleteRatingId} closeForms={closeForms} />}\n    </div>\n  )\n}\n\nexport default Ratings;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}