{"ast":null,"code":"var _jsxFileName = \"/Users/minjiwoo/Desktop/comp333/COMP333_HW3/frontend/src/updaterating.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\n//import { useNavigate } from \"react-router-dom\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UpdateRating({\n  ratingId,\n  user,\n  onDataChanged\n}) {\n  _s();\n  //NOTE: USER SHOULD NOT PUT IN ID, THAT SHOULD BE SENT TO BACKEND WHEN USER CLICKS - for now though, this is just a proof of concept\n  // Values for update should auto fill with rating user clicked to update\n  // const [id, setId] = useState(\"\");\n  //const [username, setUsername] = useState(\"\");\n  const [artist, setArtist] = useState(\"\");\n  const [song, setSong] = useState(\"\");\n  const [rating, setRating] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [dataChanged, setDataChanged] = useState(false);\n  //const navigate = useNavigate();\n\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Fetch the existing rating data for the given ratingId\n    fetch(`http://localhost/COMP333_HW3/index.php/viewrating?id=${ratingId}`).then(response => response.json()).then(data => {\n      console.log(\"API Response:\", data);\n      setArtist(data.artist);\n      setSong(data.song);\n      setRating(data.rating);\n    }).catch(error => {\n      console.error(\"Error fetching rating:\", error);\n    });\n  }, [ratingId]);\n  const handleCancel = () => {\n    // Hide the form and reset form fields when the cancel button is clicked\n    setArtist(\"\");\n    setSong(\"\");\n    setRating(\"\");\n    setMessage(\"\");\n    setDataChanged(true);\n  };\n  let handleSubmit = async e => {\n    // setUsername(localStorage.getItem(\"user\"));\n    e.preventDefault();\n    try {\n      let res = await fetch(\"http://localhost/COMP333_HW3/index.php/updaterating\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          \"id\": ratingId,\n          \"username\": user,\n          \"artist\": artist,\n          \"song\": song,\n          \"rating\": rating\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      let resJson = await res.json();\n      console.log(user);\n      console.log(ratingId);\n      console.log(artist);\n      if (res.status === 200) {\n        // setId(\"\");\n        //setUsername(\"\");\n        setArtist(\"\");\n        setSong(\"\");\n        setRating(\"\");\n        setMessage(\"Rating updated\");\n        onDataChanged();\n        setDataChanged(true);\n        // setShowForm(false);\n        // Redirect user to ratings page\n        setTimeout(() => setMessage(\"\"), 2000);\n        navigate(\"/ratingstable\");\n      } else if (res.status === 400) {\n        // Access the error message from backend\n        setMessage(resJson.error);\n      } else {\n        setMessage(\"Something went wrong\");\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  const handleUpdateClick = () => {\n    setDataChanged(false); // Set dataChanged to false to show the form again\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"UpdateRating\",\n    children: !dataChanged ? /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: artist\n        // placeholder=\"Artist\"\n        ,\n        onChange: e => setArtist(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: song,\n        placeholder: \"Song\",\n        onChange: e => setSong(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: rating,\n        placeholder: \"Rating\",\n        onChange: e => setRating(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: handleSubmit,\n        children: \"Update rating\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: message ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 47\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpdateClick,\n      children: \"Update\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n_s(UpdateRating, \"gwe8YmjD2BMkcVqqlF1iQU1tQSE=\", false, function () {\n  return [useNavigate];\n});\n_c = UpdateRating;\nexport default UpdateRating;\nvar _c;\n$RefreshReg$(_c, \"UpdateRating\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","UpdateRating","ratingId","user","onDataChanged","_s","artist","setArtist","song","setSong","rating","setRating","message","setMessage","dataChanged","setDataChanged","navigate","fetch","then","response","json","data","console","log","catch","error","handleCancel","handleSubmit","e","preventDefault","res","method","body","JSON","stringify","headers","resJson","status","setTimeout","err","handleUpdateClick","className","children","onSubmit","type","value","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/minjiwoo/Desktop/comp333/COMP333_HW3/frontend/src/updaterating.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n//import { useNavigate } from \"react-router-dom\";\nimport { useNavigate } from \"react-router-dom\";\n\n\nfunction UpdateRating({ ratingId, user, onDataChanged}) {\n  //NOTE: USER SHOULD NOT PUT IN ID, THAT SHOULD BE SENT TO BACKEND WHEN USER CLICKS - for now though, this is just a proof of concept\n  // Values for update should auto fill with rating user clicked to update\n  // const [id, setId] = useState(\"\");\n  //const [username, setUsername] = useState(\"\");\n  const [artist, setArtist] = useState(\"\");\n  const [song, setSong] = useState(\"\");\n  const [rating, setRating] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [dataChanged, setDataChanged] = useState(false);\n  //const navigate = useNavigate();\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    // Fetch the existing rating data for the given ratingId\n    fetch(`http://localhost/COMP333_HW3/index.php/viewrating?id=${ratingId}`)\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(\"API Response:\", data);\n        setArtist(data.artist);\n        setSong(data.song);\n        setRating(data.rating);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching rating:\", error);\n      });\n  }, [ratingId]);\n\n  const handleCancel = () => {\n    // Hide the form and reset form fields when the cancel button is clicked\n    setArtist(\"\");\n    setSong(\"\");\n    setRating(\"\");\n    setMessage(\"\");\n    setDataChanged(true);\n  };\n \n  let handleSubmit = async (e) => {\n   // setUsername(localStorage.getItem(\"user\"));\n    e.preventDefault();\n    try {\n      let res = await fetch(\"http://localhost/COMP333_HW3/index.php/updaterating\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          \"id\": ratingId,\n          \"username\": user,\n          \"artist\": artist,\n          \"song\" : song,\n          \"rating\" : rating\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      let resJson = await res.json();\n      console.log(user)\n      console.log(ratingId)\n      console.log(artist)\n      if (res.status === 200) {\n        // setId(\"\");\n        //setUsername(\"\");\n        setArtist(\"\");\n        setSong(\"\");\n        setRating(\"\");\n        setMessage(\"Rating updated\");\n        onDataChanged();\n        setDataChanged(true);\n        // setShowForm(false);\n        // Redirect user to ratings page\n        setTimeout(() => setMessage(\"\"), 2000);\n        navigate(\"/ratingstable\"); \n      } else if (res.status === 400) {\n          // Access the error message from backend\n          setMessage(resJson.error);\n      } else {\n        setMessage(\"Something went wrong\");\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const handleUpdateClick = () => {\n    setDataChanged(false); // Set dataChanged to false to show the form again\n  };\n\n  return (\n    <div className=\"UpdateRating\">\n      {!dataChanged ? (\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            value={artist}\n            // placeholder=\"Artist\"\n            onChange={(e) => setArtist(e.target.value)}\n          />\n          <input\n            type=\"text\"\n            value={song}\n            placeholder=\"Song\"\n            onChange={(e) => setSong(e.target.value)}\n          />\n          <input\n            type=\"text\"\n            value={rating}\n            placeholder=\"Rating\"\n            onChange={(e) => setRating(e.target.value)}\n          />\n          <button type=\"submit\" onClick={handleSubmit}>Update rating</button>\n          <button type=\"button\" onClick={handleCancel}>Cancel</button>\n\n          <div className=\"message\">{message ? <p>{message}</p> : null}</div>\n        </form>\n      ) : (\n        <button onClick={handleUpdateClick}>Update</button>\n      )}\n    </div>\n  );\n}\n  \n  export default UpdateRating;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}