{"ast":null,"code":"var _jsxFileName = \"/Users/minjiwoo/Desktop/comp333/COMP333_HW3/frontend/src/updaterating.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\n//import { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UpdateRating() {\n  _s();\n  //NOTE: USER SHOULD NOT PUT IN ID, THAT SHOULD BE SENT TO BACKEND WHEN USER CLICKS - for now though, this is just a proof of concept\n  // Values for update should auto fill with rating user clicked to update\n  const [id, setId] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [artist, setArtist] = useState(\"\");\n  const [song, setSong] = useState(\"\");\n  const [rating, setRating] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  //const navigate = useNavigate();\n\n  let handleSubmit = async e => {\n    setUsername(localStorage.getItem(\"user\"));\n    e.preventDefault();\n    try {\n      let res = await fetch(\"http://localhost/COMP333_HW3/index.php/updaterating\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          \"id\": id,\n          \"username\": username,\n          \"artist\": artist,\n          \"song\": song,\n          \"rating\": rating\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      let resJson = await res.json();\n      if (res.status === 200) {\n        setId(\"\");\n        setUsername(\"\");\n        setArtist(\"\");\n        setSong(\"\");\n        setRating(\"\");\n        setMessage(\"Rating updated\");\n        // Redirect user to ratings page\n        //navigate(\"/ratingstable\");\n      } else if (res.status === 400) {\n        // Access the error message from backend\n        setMessage(resJson.error);\n      } else {\n        setMessage(\"Something went wrong\");\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"UpdateRating\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: id,\n        placeholder: \"Id\",\n        onChange: e => setId(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: artist,\n        placeholder: \"Artist\",\n        onChange: e => setArtist(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: song,\n        placeholder: \"Song\",\n        onChange: e => setSong(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: rating,\n        placeholder: \"Rating\",\n        onChange: e => setRating(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Update rating\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: message ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 45\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(UpdateRating, \"cpwNiiED5g9fPFTRAlw0HEDoZbY=\");\n_c = UpdateRating;\nexport default UpdateRating;\nvar _c;\n$RefreshReg$(_c, \"UpdateRating\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","UpdateRating","_s","id","setId","username","setUsername","artist","setArtist","song","setSong","rating","setRating","message","setMessage","handleSubmit","e","localStorage","getItem","preventDefault","res","fetch","method","body","JSON","stringify","headers","resJson","json","status","error","err","console","log","className","children","onSubmit","type","value","placeholder","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/minjiwoo/Desktop/comp333/COMP333_HW3/frontend/src/updaterating.js"],"sourcesContent":["import React, { useState } from \"react\";\n//import { useNavigate } from \"react-router-dom\";\n\nfunction UpdateRating() {\n  //NOTE: USER SHOULD NOT PUT IN ID, THAT SHOULD BE SENT TO BACKEND WHEN USER CLICKS - for now though, this is just a proof of concept\n  // Values for update should auto fill with rating user clicked to update\n  const [id, setId] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [artist, setArtist] = useState(\"\");\n  const [song, setSong] = useState(\"\");\n  const [rating, setRating] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  //const navigate = useNavigate();\n \n  let handleSubmit = async (e) => {\n    setUsername(localStorage.getItem(\"user\"));\n    e.preventDefault();\n    try {\n      let res = await fetch(\"http://localhost/COMP333_HW3/index.php/updaterating\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          \"id\": id,\n          \"username\": username,\n          \"artist\": artist,\n          \"song\" : song,\n          \"rating\" : rating\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      let resJson = await res.json();\n      if (res.status === 200) {\n        setId(\"\");\n        setUsername(\"\");\n        setArtist(\"\");\n        setSong(\"\");\n        setRating(\"\");\n        setMessage(\"Rating updated\");\n        // Redirect user to ratings page\n        //navigate(\"/ratingstable\");\n      } else if (res.status === 400) {\n          // Access the error message from backend\n          setMessage(resJson.error);\n      } else {\n        setMessage(\"Something went wrong\");\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <div className=\"UpdateRating\">\n      <form onSubmit={handleSubmit}>\n          <input\n          type=\"number\"\n          value={id}\n          placeholder=\"Id\"\n          onChange={(e) => setId(e.target.value)}\n        />\n        <input\n          type=\"text\"\n          value={artist}\n          placeholder=\"Artist\"\n          onChange={(e) => setArtist(e.target.value)}\n        />\n         <input\n          type=\"text\"\n          value={song}\n          placeholder=\"Song\"\n          onChange={(e) => setSong(e.target.value)}\n        /> \n        <input\n        type=\"text\"\n        value={rating}\n        placeholder=\"Rating\"\n        onChange={(e) => setRating(e.target.value)}\n      />\n        <button type=\"submit\">Update rating</button>\n\n        <div className=\"message\">{message ? <p>{message}</p> : null}</div>\n      </form>\n    </div>\n  );\n}\n  \n  export default UpdateRating;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}